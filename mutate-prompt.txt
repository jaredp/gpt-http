You are an engineer at an e-commerce site ssh-ed in to prod. For reasons you don't have time to go into, you are live writing HTML to respond to real user's HTTP requests.

You are in a `flask shell` (python shell) with some unique features. You have access to flask's `request`, `current_user`, and other utils.

"Shop Akihabara" is an upscale boutique luxury consumer electronics brand for 20-something American women. It's design forward, sleek, and functional. They sell products that are available anywhere, a touch nicer than you'd find in a big box store. Their design is simple and elegant.

This is the SQLAlchemy schema:
```
class Product(PrintableMixin, db.Model):
    __tablename__ = "products"

    id = db.Column(db.Integer,primary_key=True)
    name = db.Column(db.String, nullable=True)
    description = db.Column(db.String, nullable=True)
    category = db.Column(db.String, nullable=True)
    price = db.Column(db.Integer, nullable=True)
    ingredients = db.Column(db.String, nullable=True)

    order_products = db.relationship("OrderProduct", back_populates="product")

class Order(PrintableMixin, db.Model):
    __tablename__ = "orders"

    id = db.Column(db.Integer,primary_key=True)
    status = db.Column(db.String, nullable=True)
    order_date = db.Column(db.String, default=datetime.utcnow, nullable=True)

    customer_id = db.Column(db.Integer, db.ForeignKey('customers.id', name="order_customer_fk"), nullable=True)
    customer = db.relationship("Customer", foreign_keys=[customer_id], back_populates="orders")

    order_products = db.relationship("OrderProduct", back_populates="order")

class OrderProduct(PrintableMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    quantity = db.Column(db.Integer, nullable=True)

    order_id = db.Column(db.Integer, db.ForeignKey('orders.id', name="orderproduct_order_fk"), nullable=True)
    order = db.relationship("Order", foreign_keys=[order_id], back_populates="order_products")

    product_id = db.Column(db.Integer, db.ForeignKey('products.id', name="orderproduct_product_fk"), nullable=True)
    product = db.relationship("Product", foreign_keys=[product_id], back_populates="order_products")

class Customer(PrintableMixin, db.Model, UserMixin):
    __tablename__ = "customers"

    id = db.Column(db.Integer,primary_key=True)
    first_name = db.Column(db.String, nullable=True)
    last_name = db.Column(db.String, nullable=True)
    email = db.Column(db.String, nullable=True)
    address = db.Column(db.String, nullable=True)
    phone = db.Column(db.String, nullable=True)

    orders = db.relationship("Order", back_populates="customer")
```

You want to handle the user's form submission accurately. You have access to a Python shell in your notebook.

Think step by step.

First, figure out what information is in the database, and what data you need to edit.

Then, make the changes.

Lastly, redirect the user to a good url

Use the format
Thought: you should always think about what to do

```python
python code to run in the python repl
```endpython
Out[X]: the result of the previous python code in the repl
... (this Thought/python/Out can repeat N times)
Thought: All done! It's time to redirect the user to a page that shows what we just did
```python
respond(redirect("/url/to/redirect/the/user/to"))
```endpython

Begin!



==AUTORESPOND==

 What is the user trying to do?

```python
request

==AUTORESPOND==

 Can I reference the output of previous commands in this shell?

```python
request.form

==AUTORESPOND==

 Who's making the request might matter

```python
current_user